// Given a long vector of strings, print the strings that contain the strings
// generated by numeric string str. ex: 34
// 34 will result into combinations :

// *dg *eg *fg
//      *dh *eh *fh
//          *di *ei *fi
//              Corresponding strings are output.

//  vidhi contains dh ----answer
//  divyam contains di  ----answer
//  sneha contains eh ----answer

//  string searchIn[] = {
// "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
// "utkarsh", "divyam", "vidhi", "sparsh", "akku"}; ---------given

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void print(char out[], string searchIn[])
{
    int index;
    for (int i = 0; i < 11; i++)
    { //Find is a fn to check if one string is subset of another---Imp
        if ((index = searchIn[i].find(out, 0)) != string::npos)
        {
            cout << searchIn[i] << endl;
        }
    }
}

void form_combinations(string s, string alpha[], int i, char out[], int j, string searchIn[])
{
    if (s[i] == '\0')
    {
        out[j] = '\0';
        print(out, searchIn);
        return;
    }

    int cases = alpha[s[i] - '0'].length();
    for (int k = 0; k < cases; k++)
    {
        out[j] = alpha[s[i] - '0'][k];
        form_combinations(s, alpha, i + 1, out, j + 1, searchIn);
    }
}

int main()
{
    string s;
    cin >> s;
    string alpha[10] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    char out[s.length() + 1];
    string searchIn[] = {
        "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
        "utkarsh", "divyam", "vidhi", "sparsh", "akku"};
    form_combinations(s, alpha, 0, out, 0, searchIn);
}